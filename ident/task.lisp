(in-package :spcr)

(defun build-pcacs (pca-components-list &key (data-path "/data/progr/spcr/data/"))
  (let ((start (get-internal-run-time)) orig-data asc asc-data orig-pcac pcacs)
    (flet ((relative-path (name)
	     (strings data-path name))
	   (time-stamp ()
	     (prog1
		 (info "~A seconds passed~%"
		       (float (/ (- (get-internal-run-time) start) internal-time-units-per-second)))
	       (setf start (get-internal-run-time)))))
      (info "1: Loading original vectors~%")
      (setf orig-data (restore (relative-path "sp-source-data.dat")))
      (time-stamp) (gc)
      (info "2: Creating autoscale codec and storing to disc~%")
      (setf asc (make-autoscale-codec orig-data))
      (store asc (relative-path "asc.dat"))
      (time-stamp) (gc)
      (info "3: Encoding data and storing to disc~%")
      (setf asc-data (encode asc (annil::copy-patterns orig-data)))
      (store asc-data (relative-path "sp-asc-data.dat"))
      (setf orig-data nil)
      (time-stamp) (gc)
      (info "4: Creating source pca codec and storing to disc~%")
      (setf orig-pcac (make-pca-codec asc-data '((:method . :svd))))
      (gc) (store orig-pcac (relative-path "orig-pcac.dat"))
      (time-stamp) (gc)
      (info "5: Creating pca codecs for ~A components and storing to disc~%" pca-components-list)
      (setf pcacs (mapcar #'(lambda (dim) (reduce-pca-codec orig-pcac dim)) pca-components-list))
      (gc) (store pcacs (relative-path "pcacs.dat"))
      (time-stamp) (gc)
      pcacs)))
